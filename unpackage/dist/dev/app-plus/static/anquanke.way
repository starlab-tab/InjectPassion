main
<div\s*class=".*article-detail"([\s\S]*?)>([\s\S]*)<\/div>\s*<section\s*.*?>

remove
分享
<div\s*class="bdsharebuttonbox".*\s*.*?>([\s\S]*?)<\/div>

remove
转载
<section\s*class="article-footer-label">([\s\S]*?)<\/section>

remove
button
<button([\s\S]*?)>([\s\S]*?)<\/button>

remove
<section([\s\S].*?)class="hide-in-mobile-device"([\s\S]*?)>([\s\S]*?)<\/section>

remove
<section([\s\S].*?)class="hide-in-mobile-device">

replace
data-original src

remove
<div\s*class="hide-in-mobile-device"([\s\S]*?)>([\s\S]*?)<\/div>



https://api.anquanke.com/data/v1/posts?page=1&size=20&category=week&sticky=false
https://api.anquanke.com/data/v1/post?id=212495
https://api.anquanke.com/data/v1/comment?top=true&post_id=212406
专题
https://api.anquanke.com/data/v1/posts/subject?page=1&size=20
专题 文章 列表
https://api.anquanke.com/data/v1/post?id=213005

漏洞预警
https://api.anquanke.com/data/v1/vul?page=1




https://www.anquanke.com/tag/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95


style="margin-top: 20px; position: relative; padding: .75rem 1.25rem; margin-bottom: 1rem;color: #856404; background-color: #fff3cd;"


<title>唯快不破的分块传输绕WAF - 安全客，安全资讯平台</title><div class="common-left-content-container article-detail"
                     style="background-color:white;overflow:hidden;">
                    <h1>
                        唯快不破的分块传输绕WAF
                    </h1>
                    <p class="article-top-info" style="margin-bottom: 10px;position:relative;">
                            <span>
                                阅读量 &nbsp;&nbsp;
                                <b>40677</b>
                            </span>
                        <span style="color:#cccccc;margin-left:20px;margin-right:20px;">|</span>
                        <span>
                                                            评论
                                <b>
                                    <a target="_blank">1</a>
                                </b>
                                                                                    </span>
                    
                        <div style="height:40px;width:100%;top:-3px;right:-35px;position:absolute;z-index:0;padding-top: 2px;">
                            
                        </div>
                    </div>
                    </p>
                    <time class="article-date">发布时间：2020-07-23 11:00:18</time>
                                                            <div class="article-content">
                        <html>
<head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"></head>
<body>
<p><img class="alignnone size-full wp-image-211514 aligncenter" alt="" width="436" height="360" src="https://p3.ssl.qhimg.com/t01082ea7338d42dc8d.jpg"></p>
<p> </p>
<h2 name="h2-0" id="h2-0">0x01 前言</h2>
<p>某重保项目，需要进行渗透，找到突破口，拿起sqlmap一顿梭，奈何安全设备在疯狂运转，故祭起绕过注入的最强套路-分块传输绕过WAF进行SQL注入。安全人员当然安全第一，拿到渗透授权书，测试时间报备等操作授权后：</p>
<p><img class="aligncenter" src="https://p2.ssl.qhimg.com/t01ac7116c0b861a562.jpg"></p>
<p> </p>
<h2 name="h2-1" id="h2-1">0x02 神马探测</h2>
<p>因为客户授权的是三个段，资产众多，且时间紧张，多工具搭配同时进行资产探测。故先对三个段使用资产探测神器goby和端口神器nmap一顿怼，还有静悄悄不说话的主机漏扫神器Nessus。因此也就结合探测出来的ip和端口及其他资产详情，信息探测进行时，先根据目前得到的web网站一顿梭。在浏览器输入IP+端口，滴，开启web世界。喝了一口肥宅快乐水并咪咪眼开始端详起这几个web网站。</p>
<p><img class="aligncenter" src="https://p5.ssl.qhimg.com/t0160c04143fa09f06a.jpg"></p>
<p>界面是这个样子：</p>
<p><img class="aligncenter" src="https://p2.ssl.qhimg.com/t01377834aa40d487f4.png"></p>
<p>定睛一看，先抓个包跑跑注入，神器sqlmap一片红。卒，遂放弃。</p>
<p><img class="aligncenter" src="https://p1.ssl.qhimg.com/t01e332a8fa04a57928.png"></p>
<p>再次定睛一看，妥妥的用户登录页面，试试弱口令，burp神器走一波。</p>
<p><img class="aligncenter" src="https://p3.ssl.qhimg.com/t01d1f6cb5548cb2ada.png"></p>
<p><img class="aligncenter" src="https://p5.ssl.qhimg.com/t015538b8018f95b961.png"></p>
<p>嗯，用户名密码可爆破漏洞，提交，收工。</p>
<p><img class="aligncenter" src="https://p4.ssl.qhimg.com/t01275f251f2197ba03.jpg"></p>
<p>报告提交后，我领导看到后，嗯，如下图：</p>
<p><img class="aligncenter" src="https://p4.ssl.qhimg.com/t01ab62b2c5a209ec8b.jpg"></p>
<p>挨了一顿锤之后，手里的肥宅快乐水不香了，继续努力搬砖吧。</p>
<p><img class="aligncenter" src="https://p3.ssl.qhimg.com/t01ef2c8537fcfd757f.jpg"></p>
<p> </p>
<h2 name="h2-2" id="h2-2">0x03 继续杠不要怂</h2>
<p>作为男子汉，肿么能因为sqlmap一片红就继续放弃呢？是男人就继续用sqlmap杠，这次祭起分块WAF进行绕过。</p>
<p><img class="aligncenter" src="https://p3.ssl.qhimg.com/t01ac95b7c39e826289.jpg"></p>
<p> </p>
<h2 name="h2-3" id="h2-3">0x04 what is 分块传输？</h2>
<p>分块传输编码（Chunked transfer encoding）是超文本传输协议（HTTP）中的一种数据传输机制，允许HTTP由应用服务器发送给客户端应用（ 通常是网页浏览器）的数据可以分成多个部分。分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供。 通常，HTTP应答消息中发送的数据是整个发送的，Content-Length消息头字段表示数据的长度。数据的长度很重要，因为客户端需要知道哪里是应答消息的结束，以及后续应答消息的开始。然而，使用分块传输编码，数据分解成一系列数据块，并以一个或多个块发送，这样服务器可以发送数据而不需要预先知道发送内容的总大小。通常数据块的大小是一致的，但也不总是这种情况。一般情况HTTP请求包的Header包含Content-Length域来指明报文体的长度。有时候服务生成HTTP回应是无法确定消息大小的，比如大文件的下载，或者后台需要复杂的逻辑才能全部处理页面的请求，这时用需要实时生成消息长度，服务器一般使用chunked编码。在进行Chunked编码传输时，在回复消息的Headers有Transfer-Encoding域值为chunked，表示将用chunked编码传输内容。</p>
<p>这在http协议中也是个常见的字段，用于http传送过程的分块技术，原因是http服务器响应的报文长度经常是不可预测的，使用Content-length的实体搜捕并不是总是管用。</p>
<p>分块技术的意思是说，实体被分成许多的块，也就是应用层的数据，TCP在传送的过程中，不对它们做任何的解释，而是把应用层产生数据全部理解成二进制流，然后按照MSS的长度切成一分一分的，一股脑塞到tcp协议栈里面去，而具体这些二进制的数据如何做解释，需要应用层来完成。</p>
<p><img class="aligncenter" src="https://p1.ssl.qhimg.com/t01efb06a3f1cd75490.png"></p>
<p>简而言之，就是把数据包分成一块一块的丢过去，骗骗死脑筋的WAF。</p>
<p><img class="aligncenter" src="https://p5.ssl.qhimg.com/t01415c7b44ec8cdfd8.jpg"></p>
<p> </p>
<h2 name="h2-4" id="h2-4">0x05 分块传输开启绕过</h2>
<p>手工进行分块绕过较为繁琐，且花费时间长，面对大量资产的情况，项目时间较为紧张的情况下，还是使用自动化工具来的快捷方便。这里使用sqlmap+burp+burp插件（chunked-coding-converter）。祭出我二表哥工具的项目地址：<a href="https://github.com/c0ny1/chunked-coding-converter" target="_blank" rel="noopener noreferrer">https://github.com/c0ny1/chunked-coding-converter</a>。快速使用：burp获取post包后，复制post包，做成post.txt,并放置于sqlmap工具文件下。（忽略在下负一级的打马赛克技术）</p>
<p><img class="aligncenter" src="https://p4.ssl.qhimg.com/t01eaf4dd12b41b39a3.png"></p>
<p><img class="aligncenter" src="https://p3.ssl.qhimg.com/t01f67ba6531f49d5ce.png"></p>
<p>使用burp 设定插件，开启插件代理：</p>
<p><img class="aligncenter" src="https://p1.ssl.qhimg.com/t0197f5bbb824257027.png"></p>
<p>使用Sqlmap进行代理：sqlmap语句sqlmap.py -r post.txt –proxy=<a href="http://127.0.0.1:8080" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8080</a> –os-shell</p>
<p><img class="aligncenter" src="https://p0.ssl.qhimg.com/t01b19421ada30b3e9a.png"></p>
<p><img class="aligncenter" src="https://p1.ssl.qhimg.com/t011ad5ce0e9374eef8.png"></p>
<p>什么？为什么不继续了？因为客户不让了，表演结束了，谢谢大家。</p>
<p><img class="aligncenter" src="https://p3.ssl.qhimg.com/t01581ce984c315817c.png"></p>
<p> </p>
<h2 name="h2-5" id="h2-5">0x06 让我再多说一句</h2>
<p>当然为了更加快速化，和方便快捷一步到位，可使用sqlmap参数batch自动进行注入。</p>
<p>sqlmap.py -r post.txt –proxy=<a href="http://127.0.0.1:8080" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8080</a> –batch</p>
<p>当当然，我们再可以提高速度，进行一步到位，可使用sqlmap参数threads提高并发数。</p>
<p>sqlmap.py -r post.txt –proxy=<a href="http://127.0.0.1:8080" target="_blank" rel="noopener noreferrer">http://127.0.0.1:8080</a> –batch –threads 10</p>
<p>当当当然可以修改sqlmap配置文件将默认最高10改成9999，具体根据现场实际情况进行修改。</p>
<p>Sqlmap配置文件settings.py，将MAX_NUMBER_OF_THREADS = 9999。</p>
<p>多线程sqlmap效果如下：</p>
<p><img class="aligncenter" src="https://p1.ssl.qhimg.com/t018052afb38a61c93f.jpg"></p>
<p>Ok，以上是面对大量资产绕过waf进行注入的姿势。</p>
<p><img class="aligncenter" src="https://p4.ssl.qhimg.com/t01fde8d20673a4affb.png"></p>
</body>
</html>
                    </div>
                    
                    <section style="margin-top:18px;">
                                                    <a style="display: inline-block; height: 26px; line-height: 24px; padding: 0 15px; border: 1px solid #1dada7; color: #1dada7; border-radius: 15px;text-decoration: none !impotant;" href="/tag/Web安全" target="_blank">Web安全</a>                             <a style="display: inline-block; height: 26px; line-height: 24px; padding: 0 15px; border: 1px solid #1dada7; color: #1dada7; border-radius: 15px;text-decoration: none !impotant;" href="/tag/渗透测试" target="_blank">渗透测试</a>                     </section>
                    
                    
                    <div>
                    </div>
                </div>